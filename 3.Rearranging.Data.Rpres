Rearranging and Cleaning Data
========================================================
css: mystyle.css
author: Di Cook, Eric Hare
date: 5/15-18/2015
width: 1600
height: 800

Using the packages tidyr, dplyr
========================================================
During a ten week sensory experiment, 12 individuals were asked to assess taste of french fries on several scales (how potato-y, buttery, grassy, rancid, paint-y do the fries taste?)

French fries were fried in one of three different oils, and each week individuals had to assess six batches of french fries (all three oils, replicated twice)
```{r, echo = FALSE, results='asis'}
library(xtable)
library(reshape2)
library(tidyr)

print(xtable(head(french_fries)), type = "html")
```

This format is not ideal for data analysis
========================================================
What code would be needed to plot each of the ratings over time as a different color?
```{r, eval=FALSE}
library(ggplot2)

french_sub <- french_fries[french_fries$time == 10,]

qplot("1_potato", potato, data = french_sub, fill = I("red"), geom = "boxplot") +
    geom_boxplot(aes(x = "2_buttery", y = buttery), fill = I("orange")) +
    geom_boxplot(aes(x = "3_grassy", y = grassy), fill = I("yellow")) +
    geom_boxplot(aes(x = "4_rancid", y = rancid), fill = I("green")) +
    geom_boxplot(aes(x = "5_painty", y = painty), fill = I("blue")) +
    xlab("variable") + ylab("rating")
```

The Plot
========================================================
```{r, echo=FALSE}
library(ggplot2)

french_sub <- french_fries[french_fries$time == 10,]

qplot("1_potato", potato, data = french_sub, fill = I("red"), geom = "boxplot") +
    geom_boxplot(aes(x = "2_buttery", y = buttery), fill = I("orange")) +
    geom_boxplot(aes(x = "3_grassy", y = grassy), fill = I("yellow")) +
    geom_boxplot(aes(x = "4_rancid", y = rancid), fill = I("green")) +
    geom_boxplot(aes(x = "5_painty", y = painty), fill = I("blue")) +
    xlab("variable") + ylab("rating")
```

What we have and what we want
========================================================
We want to change this **wide format**:

<img src="figures/tableoverview.png" alt="Drawing" style="width: 1000px;"/>

to this **long format**:

<img src="figures/tablelong.png" alt="Drawing" style="width: 300px;"/>

Gathering
========================================================
- When gathering, you need to specify the **keys** (identifiers) and the **values** (measures).

Keys/Identifiers:
- Identify a record (must be unique)
- Example: Indices on an random variable
- Fixed by design of experiment (known in advance)
- May be single or composite (may have one or more variables)

Values/Measures:
- Collected during the experiment (not known in advance)
- Usually numeric quantities

Gathering the French Fry Data
========================================================
```{r}
french_fries_long <- gather(french_fries, key = variable, value = rating, potato:painty)

head(french_fries_long)
```

Let's Reconstruct our Plot
========================================================
```{r}
french_fries_long_sub <- french_fries_long[french_fries_long$time == 10,]

qplot(variable, rating, data = french_fries_long_sub, fill = variable, geom = "boxplot")
```

Long to Wide
========================================================
In certain applications, we may wish to take a long dataset and convert it to a wide dataset (Perhaps displaying in a table).

```{r}
head(french_fries_long)
```

Spread
========================================================
We use the **spread** function from tidyr to do this:

```{r}
french_fries_wide <- spread(french_fries_long, key = variable, value = rating)

head(french_fries_wide)
```

The Split-Apply-Combine Approach
========================================================
- *Split* a dataset into many smaller sub-datasets
- *Apply* some function to each sub-dataset to compute a result
- *Combine* the results of the function calls into a one dataset

<img src="figures/sac.png" alt="Drawing" style="width: 600px; margin-left: 500px;"/>

Split-Apply-Combine in dplyr
========================================================
```{r}
library(dplyr)

french_fries_split <- group_by(french_fries_long, variable) # SPLIT
french_fries_apply <- summarise(french_fries_split, rating = mean(rating, na.rm = TRUE)) # APPLY + COMBINE
french_fries_apply
```

The pipe operator
========================================================
dplyr allows us to chain together these data analysis tasks using the `%>%` (pipe) operator:

```{r}
french_fries %>% gather(key = variable, value = rating, potato:painty)
             %>% group_by(variable)
             %>% summarise(rating = mean(rating, na.rm = TRUE))
```


PISA data
========================================================

Glyph maps
========================================================
